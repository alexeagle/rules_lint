load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:eslint/package_json.bzl", eslint_bin = "bin")
load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")

package(default_visibility = ["//visibility:public"])

compile_pip_requirements(
    name = "requirements",
)

npm_link_all_packages(name = "node_modules")

exports_files(
    [
        "buf.yaml",
        ".flake8",
        "pmd.xml",
        ".ruff.toml",
        ".shellcheckrc",
    ],
    visibility = ["//visibility:public"],
)

# We can test that it works with:
# bazel run :flake8 -- --help
py_console_script_binary(
    name = "flake8",
    pkg = "@pip//flake8:pkg",
)

eslint_bin.eslint_binary(name = "eslint")

js_library(
    name = "eslintrc",
    srcs = [".eslintrc.cjs"],
    deps = [
        ":node_modules/@typescript-eslint/eslint-plugin",
        ":node_modules/@typescript-eslint/parser",
    ],
)

java_binary(
    name = "pmd",
    main_class = "net.sourceforge.pmd.PMD",
    runtime_deps = ["@net_sourceforge_pmd"],
)

config_setting(
    name = "linux_x86",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

# We can test that it works with:
# bazel run :ruff -- help
native_binary(
    name = "ruff",
    src = select(
        {
            "@platforms//os:osx": "@ruff_aarch64-apple-darwin//:ruff",
            ":linux_x86": "@ruff_x86_64-unknown-linux-gnu//:ruff",
        },
        no_match_error = "Ruff has not been fetched for your platform",
    ),
    out = "ruff",
    visibility = ["//visibility:public"],
)

# bazel run :shellcheck -- --help
native_binary(
    name = "shellcheck",
    src = select(
        {
            "@platforms//os:osx": "@shellcheck_darwin.x86_64//:shellcheck",
            ":linux_x86": "@shellcheck_linux.x86_64//:shellcheck",
            ":linux_aarch64": "@shellcheck_linux.aarch64//:shellcheck",
        },
        no_match_error = "Shellcheck hasn't been fetched for your platform",
    ),
    out = "shellcheck",
    visibility = ["//visibility:public"],
)
