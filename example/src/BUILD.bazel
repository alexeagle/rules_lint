load("@aspect_rules_lint//format:defs.bzl", "format_test")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_proto//proto:defs.bzl", "proto_library")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "md",
    srcs = ["README.md"],
    tags = ["markdown"],
)

ts_project(
    name = "ts",
    srcs = ["file.ts"],
    transpiler = "tsc",
)

proto_library(
    name = "unused",
    srcs = ["unused.proto"],
)

proto_library(
    name = "foo_proto",
    srcs = ["file.proto"],
    deps = [":unused"],
)

py_library(
    name = "unused_import",
    srcs = ["unused_import.py"],
)

java_library(
    name = "foo",
    srcs = ["Foo.java"],
)

sh_library(
    name = "hello_shell",
    srcs = ["hello.sh"],
)

go_binary(
    name = "hello_go",
    srcs = ["hello.go"],
)

go_binary(
    name = "hello2_go",
    srcs = ["hello2.go"],
    deps = [":hello_go_helper"],
)

go_library(
    name = "hello_go_helper",
    srcs = ["hello_helper.go"],
    importpath = "github.com/aspect-build/rules_lint/example/src/hello_helper",
)

cc_binary(
    name = "hello_cc",
    srcs = ["hello.cpp"],
)

# Cause a test failure when files are not formatted.
# This is useful when you have no other way to check formatting on CI; see documentation.
format_test(
    name = "format_files_test",
    srcs = [
        "hello.go",
        "hello.sh",
    ],
)
