"Demonstrates how to enforce zero-lint-tolerance policy with tests"

load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("//tools/lint:linters.bzl", "eslint_test", "flake8_test", "pmd_test", "ruff_test", "shellcheck_test")

write_file(
    name = "ts_code_generator",
    out = "generated.ts",
    content = ["export const a: number = 1"],
)

write_file(
    name = "py_code_generator",
    out = "generated.py",
    content = ["import os"],
)

write_file(
    name = "java_code_generator",
    out = "generated.java",
    content = ["public class generated { protected void finalize(int a) {} }"],
)

write_file(
    name = "shell_code_generator",
    out = "generated.sh",
    content = [
        "#!/usr/bin/env bash",
        "[ -z $THING ] && echo 'hello world'",
    ],
)

ts_project(
    name = "no_violations",
    srcs = [
        "generated.ts",
        "no_violations.ts",
    ],
    tsconfig = {},
)

eslint_test(
    name = "eslint_empty_report",
    srcs = [":no_violations"],
)

py_library(
    name = "generated_py",
    srcs = ["generated.py"],
)

java_library(
    name = "generated_java",
    srcs = ["generated.java"],
)

sh_library(
    name = "generated_sh",
    srcs = ["generated.sh"],
    tags = ["lint-genfiles"],
)

flake8_test(
    name = "flake8_should_ignore_generated",
    srcs = [":generated_py"],
)

ruff_test(
    name = "ruff_should_ignore_generated",
    srcs = [":generated_py"],
)

pmd_test(
    name = "pmd_should_ignore_generated",
    srcs = [":generated_java"],
)

flake8_test(
    name = "flake8",
    srcs = ["//src:unused_import"],
    # Expected to fail based on current content of the file.
    # Normally you'd fix the file instead of tagging this test.
    tags = ["manual"],
)

pmd_test(
    name = "pmd",
    srcs = ["//src:foo"],
    # Expected to fail based on current content of the file.
    # Normally you'd fix the file instead of tagging this test.
    tags = ["manual"],
)

eslint_test(
    name = "eslint",
    srcs = ["//src:ts"],
    # Expected to fail based on current content of the file.
    # Normally you'd fix the file instead of tagging this test.
    tags = ["manual"],
)

shellcheck_test(
    name = "shellcheck",
    srcs = ["//src:hello_shell"],
    # Expected to fail based on current content of the file.
    # Normally you'd fix the file instead of tagging this test.
    tags = ["manual"],
)

shellcheck_test(
    name = "shellcheck-generated",
    srcs = [":generated_sh"],
    # Expected to fail because the sh_library opted-in to having generated code checked as well
    tags = ["manual"],
)
