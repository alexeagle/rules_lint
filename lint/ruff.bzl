"""API for declaring a Ruff lint aspect that visits py_library rules.

Typical usage:

```
load("@aspect_rules_lint//lint:ruff.bzl", "ruff_aspect")

ruff = ruff_aspect(
    binary = "@@//:ruff",
    config = "@@//:.ruff.toml",
)
```
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//lint/private:lint_aspect.bzl", "report_file")

def ruff_action(ctx, executable, srcs, config, report, use_exit_code = False):
    """Run ruff as an action under Bazel.

    Args:
        ctx: Bazel Rule or Aspect evaluation context
        executable: label of the the ruff program
        srcs: python files to be linted
        config: label of the ruff config file (pyproject.toml, ruff.toml, or .ruff.toml)
        report: output file to generate
        use_exit_code: whether to fail the build when a lint violation is reported
    """
    inputs = srcs + [config]
    outputs = [report]

    # Wire command-line options, see
    # `ruff help check` to see available options
    args = ctx.actions.args()
    args.add("check")
    args.add(config, format = "--config=%s")
    args.add(report, format = "--output-file=%s")
    if not use_exit_code:
        args.add("--exit-zero")

    args.add_all(srcs)

    ctx.actions.run(
        inputs = inputs,
        outputs = outputs,
        executable = executable,
        arguments = [args],
        mnemonic = "ruff",
    )

# buildifier: disable=function-docstring
def _ruff_aspect_impl(target, ctx):
    if ctx.rule.kind not in ["py_library"]:
        return []

    report, info = report_file(target, ctx)
    ruff_action(ctx, ctx.executable._ruff, ctx.rule.files.srcs, ctx.file._config_file, report, ctx.attr.fail_on_violation)
    return [info]

def ruff_aspect(binary, config):
    """A factory function to create a linter aspect.

    Attrs:
        binary: a ruff executable. Can be obtained like so:

            load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

            http_archive(
                name = "ruff_bin_linux_amd64",
                sha256 = "<-sha->",
                urls = [
                    "https://github.com/charliermarsh/ruff/releases/download/v<-version->/ruff-x86_64-unknown-linux-gnu.tar.gz",
                ],
                build_file_content = \"""exports_files(["ruff"])\""",
            )

        config: the ruff config file (`pyproject.toml`, `ruff.toml`, or `.ruff.toml`)
    """
    return aspect(
        implementation = _ruff_aspect_impl,
        # Edges we need to walk up the graph from the selected targets.
        # Needed for linters that need semantic information like transitive type declarations.
        # attr_aspects = ["deps"],
        attrs = {
            "fail_on_violation": attr.bool(),
            "_ruff": attr.label(
                default = binary,
                executable = True,
                cfg = "exec",
            ),
            "_config_file": attr.label(
                default = config,
                allow_single_file = True,
            ),
        },
    )

# Generated by running ./mirror_ruff.sh
RUFF_VERSIONS = {
    "v0.1.0": {
        "aarch64-apple-darwin": "2e4e91d65d9453705753c0a80d773e2e613f07db7ba75b94edd12eef0e8e268d",
        "aarch64-pc-windows-msvc": "a2f66624f000c30c0768ddf2ca55c7437181fdcf937ead004cb7ef8504da2fd5",
        "aarch64-unknown-linux-gnu": "63bf7d3eec474d4ee32fac3fd396f6fabb992328eb3fdc22f68ca3c7bdfcb8ee",
        "aarch64-unknown-linux-musl": "fba0010be960178866c98c987ab5b6c639c68ccc8f062fc6287c4076ed13b42a",
        "armv7-unknown-linux-gnueabihf": "a888123359edb40d08d406ed00c9d378ec1c8a033352ae8dd88fef59fe25f354",
        "armv7-unknown-linux-musleabihf": "94ca8c41c8e4c7a75305beb75bd2f594b428228fbcc335607f69695c8a6efdf5",
        "i686-pc-windows-msvc": "2c9e7dde93a1d2d458f03c98dbf4c0de1630d1a41a82bbaf6d91d4ffe7114523",
        "i686-unknown-linux-gnu": "582fdf2c2fe63be823a4bb6078a88c7e3e13b4146ee94df523a06224cd417d06",
        "i686-unknown-linux-musl": "c6e281540dc628b789aee96cd31c219025b32430edb2544f5e75ddcf44d95e61",
        "powerpc64-unknown-linux-gnu": "d4f4f4e8675879e01086667319955a5a36d0183fe8a86227f658f5fb01936bb1",
        "powerpc64le-unknown-linux-gnu": "076cc6973de196d05673f6671f68ee4110e1475fc8cb2cbbae09aad688ed7c82",
        "s390x-unknown-linux-gnu": "31061944ad922b7aa2cc4f7fae5a4a29abb72d5ee64538f0297eec5f20fcc4dd",
        "x86_64-apple-darwin": "f7d89c2f6b9b62ffd8f1ec0f5f9344a338acf560971b8a1ba22a2a65c94d1920",
        "x86_64-pc-windows-msvc": "a6974efb00ff6b162927691e616b45223195444a1fc28886ded8faca825312be",
        "x86_64-unknown-linux-gnu": "4d669faf7d0964cde56589ad626f45a27ca41f2c91671b3a5aafb5d1c7bcd2e1",
        "x86_64-unknown-linux-musl": "867bf01477096ae8a2b20758e189fe8fa8f0b53a6b8d090066724bc37d6df61e",
    },
    "v0.0.292": {
        "aarch64-apple-darwin": "70807eaab0f081ba0fd17fde56e860faa7bfb4a938bcadd829eb96d648eca8ac",
        "aarch64-pc-windows-msvc": "bbdf4aa474899196290734f45dabebc4faf796039367125c171ec017f7bcfa85",
        "aarch64-unknown-linux-gnu": "08b842e3cfe3c60e50ff0ebc07cf099b8fd0d881e3d40bd89b3a6d7722a058e2",
        "aarch64-unknown-linux-musl": "7dd8e7aacfb7217bd672efec59aa55711fad36b149181d6eb23468fab3f74c40",
        "armv7-unknown-linux-gnueabihf": "476c62c7a844fac476311f34ccdf194e9d77059d098352459490783825e293e7",
        "armv7-unknown-linux-musleabihf": "a28175dfe75d38f54c39df92f16c4ba4ff84a4e5a9b81351c91246ab0f6af1f4",
        "i686-pc-windows-msvc": "3dec6513e8bcbbee8a57c868acd808eb1bccd9e00b07e35c1ba70ff78fb84224",
        "i686-unknown-linux-gnu": "a7f47a1d8d599208743bfe9f4f3a96ebb65771d5923e0e68b0394c1c41bb66c0",
        "i686-unknown-linux-musl": "d7185d63840cae1a89bc63747d90f958e415bd5798a2996004481ebbd4a935bf",
        "powerpc64-unknown-linux-gnu": "7b6aa52afb3a28257825a544b0a23b1675d70c5ff9fde12dce4721c28a0e9980",
        "powerpc64le-unknown-linux-gnu": "cbf3454356b6245c8afadc7b2f02fe442c3f40c0cae7db7987f784a4559b2bee",
        "s390x-unknown-linux-gnu": "0dc6c8bd253d1f7d7fd887c9cf557c57d581989003d0bbef640d55236164f8a6",
        "x86_64-apple-darwin": "d9123a94d7d0fce2140acd7cb86f83e2b24b29d031b3a84956238e5ce2d15f42",
        "x86_64-pc-windows-msvc": "76f1fd5b40a9325a7638f0a5d1d260aa7c10b9d63456ab6d8345afa68db907fe",
        "x86_64-unknown-linux-gnu": "39a488a2e21d3bca379ba6ee2ec5cf2d641d578efb4b16c27c90272138dfa37d",
        "x86_64-unknown-linux-musl": "bb43ca7bb678bc995abbdfa005dfdd084061851c53e9c8cea9813478326eca50",
    },
}

def fetch_ruff(version = RUFF_VERSIONS.keys()[0]):
    """A repository macro used from WORKSPACE to fetch ruff binaries

    Args:
        version: a version of ruff that we have mirrored, e.g. `v0.1.0`
    """
    for plat, sha256 in RUFF_VERSIONS[version].items():
        maybe(
            http_archive,
            name = "ruff_" + plat,
            url = "https://github.com/astral-sh/ruff/releases/download/{tag}/ruff-{plat}.tar.gz".format(
                tag = version,
                plat = plat,
            ),
            sha256 = sha256,
            build_file_content = """exports_files(["ruff"])""",
        )
